# import json
# import subprocess
# from VaultFuncs import *
import base64
import time
from wsgiref import headers

from bs4 import BeautifulSoup as bs

# _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

#
# async def members_info(self, request):  # Информация о членах организации
#     org_id = await self.get_org_id(request)
#     info = subprocess.check_output(f'bw list org-members'
#                                    f' --organizationid {org_id}'
#                                    f' --session {self.auth}', shell=True)
#     dct_info = {}
#     for item in json.loads(info):
#         dct_info[item['name']] = (item['email'], item['id'])
#     return dct_info

# _____________________________________________________________________________________________________________________

# async def delete_member(self, id_member):  # Удалить члена организации
#     subprocess.check_output(
#         f'bw delete org-member {id_member}  --session {self.auth}',
#         shell=True)

# _____________________________________________________________________________________________________________________

import threading
import requests

# a = requests.post('http://127.0.0.1/admin', data={"token": 'argon2idv19m65540t3p4iXJdoThAWfLzt'})
# x = a.headers['set-cookie'].split('=')[1]
# tkn_session = x.split(';')[0]
# print(tkn_session)

# _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

# tkn_session_str = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJuYmYiOjE2OTA1NDU0ODYsImV4cCI6MTY5MDU0NjY4NiwiaXNzIjoiaHR0cHM6Ly92dy52bXRsdy5ydXxhZG1pbiIsInN1YiI6ImFkbWluX3BhbmVsIn0.tiHWUkhmvpsaXAE5wpeZWjC744OfM9uN4biUTkH07i7kG4hLKmkqZwq7djMBHqGvBh4AyHujYoWzutOhZ6LtT6vkghdz01lD2hbGtLVyqiC3PKpwwWtTK1MlczyVO4ULU4UQ3Tg7d1G5mzwsNP8LbZ4gi8RibtWFyPg_oF8_dIlS6sLxuJb9952dXjUqTIWz1CpJoh4SYEUIQT1sxM2UkU_MTfkq8U6Y91Im8FWR_olTyzzOAHN-21HrMk1uejXKtG0POkJjipOzAmJd3nanqtjXUbU1sK7vdmFOGc2JJ_yVgAXbDr25JlRo7tP79bf3bYi0sq2hNrrNBnyK09XfKA'

# page = requests.get('http://127.0.0.1/admin/organizations/overview', headers={"Cookie": f"VW_ADMIN={tkn_session_str}"})
# print(page.status_code)
# _____________________________________________________________________________________________________________________

# async def get_members(self, request):  # Получить информацию об пользователях
#     page = requests.get('http://127.0.0.1/admin/users/overview',
#                         headers={"Cookie": f"VW_ADMIN={tkn_session_str}"})
#     list_members = []
#     soup = bs(page.text, 'html.parser')
#     table = soup.find('table')
#     result = table.find_all('div', 'overflow-auto vw-org-cell')
#     for j in result:
#         list_members.append({"email": j['data-vw-user-email'],
#                              "user_id": j['data-vw-user-uuid'],
#                              "org_data": [{button.get('data-vw-org-name'): button.get('data-vw-org-uuid')}
#                                           for button in j.find_all('button')]})
#     return list_members

# _____________________________________________________________________________________________________________________

# async def get_organization(self, request):
#     page = requests.get('http://127.0.0.1/admin/organizations/overview',
#                         headers={"Cookie": f"VW_ADMIN={tkn_session_str}"})
#     list_organizations = []
#     soup = bs(page.text, 'html.parser')
#     table = soup.find('table')
#     result = table.find_all('button')
#     for j in result:
#         list_organizations.append({"name": j['data-vw-org-name'],
#                                    "email": j['data-vw-billing-email'],
#                                    "org_id": j['data-vw-org-uuid']})
#     return list_organizations

# _____________________________________________________________________________________________________________________

# def reload_auth():  # Автоматическая реавторизация каждые 10 минут
#     threading.Timer(600, reload_auth).start()
#     req = requests.post('http://127.0 .0.1/admin', data={"token": 'argon2idv19m65540t3p4iXJdoThAWfLzt'})
#     x = req.headers['set-cookie'].split('=')[1]
#     tkn_session = x.split(';')[0]
#     return tkn_session


#
#
# tkn_auth = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJuYmYiOjE2OTA4NzYwNDYsIm' \
#            'V4cCI6MTY5MDg3NzI0NiwiaXNzIjoiaHR0cHM6Ly92dy52bXRsdy5ydXxhZG1pb' \
#            'IsInN1YiI6ImFkbWluX3BhbmVsIn0.h_37Bw_u0Pcz7k7JeUUSCwZRtdxaV3dMy' \
#            'eHgLEWEzOkOt36DzBJzQDyB8qqCgPqd5lWM4vFy-cDVSczX9oWEEaslhJvZQyMX' \
#            'IPux4N6NfIkvYj6rjMFKxqMAkfs2CoKoVjHxipjyRDbFoo9F4Yp9Ftvyoffv08Q' \
#            'mq86PdGnhshQZKVXKYLmJjDaAD_pUGtWAPp-giugvZry7hZi2McxUXT0Xo2dOqZ' \
#            'CUD0n1UYvMqU3xNO7Ks9moqaNT38IuKLpdzOswwlXPwxfWH7S1l7Jm0IIBtTpjf' \
#            'etqVeV0zZifnSIcKst48lLTg6n-l84bkVskRmEDwdioH4LchK8EpRzOvg'

# _____________________________________________________________________________________________________________________

#
#
# def create_collection(data):  # Создание новой коллекции
#     bw = json.loads(subprocess.check_output
#                     (f'bw get template org-collection
#                     --session xlh3ii1VQ4RuKuWnI1IeGxqkMv7F0tJQAkkHtzGq5sRq/VWqzO+NwEMi6ie
#                     /EPrU373zRw9d596fbZcZum+31Q==',
#                     shell=True))
#     bw['organizationId'] = data["org_id"]
#     bw['name'] = data["name"]
#     bw['groups'] = []
#     item = subprocess.check_output(
#         f"bw create org-collection {base64.b64encode(bytes(json.dumps(bw), encoding='utf-8')).decode('utf-8')}"
#         f" --organizationid e58bb7e1-ff68-4ef6-a540-bfc744547ada
#                   --session xlh3ii1VQ4RuKuWnI1IeGxqkMv7F0tJQAkkHtzGq5sRq/VWqzO+NwEMi6ie/EPrU373zRw9d596fbZcZum+31Q==",
#                   shell=True)
#     item = json.loads(item)
#     dct_1 = [{item['id']: (item['name'], item['organizationId'])}]
#     print(dct_1)
#
# _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

#
# dct = {'org_id': 'e58bb7e1-ff68-4ef6-a540-bfc744547ada',
#        'name': 'ogogo',
#        'groups': []}
#
# create_collection(dct)

# _____________________________________________________________________________________________________________________

# def del_organization():
#     rec = requests.post(f'http://127.0.0.1/admin/organizations/'
#                         f'e58bb7e1-ff68-4ef6-a540-bfc744547ada/'
#                         f'delete',
#                         headers={"Cookie": f"VW_ADMIN={tkn_session_str}"})
#     print(rec.status_code)
#     return True
#
#
# get_organization()
#
# _____________________________________________________________________________________________________________________


# def get_col():
#     page = requests.get(f'http://127.0.0.1/api/organizations/20724fe4-587b-4b2f-862b-a20636c69572/
#     users?includeCollections=true',
#                         headers={"Authorization": tkn})
#


# def get_user_collections():
#     page = requests.get(f'http://127.0.0.1/api/organizations/'
#                         f'20724fe4-587b-4b2f-862b-a20636c69572/'
#                         f'users?includeCollections=true',
#                         headers={"Authorization": tkn})
#     dct = {}
#     print(page)
#     for i in page.json()['Data']:
#         dct[i['UserId']] = {'name': i['Name'],
#                           'user_Id': i['UserId'],
#                           'email': i['Email'],
#                           'groups': i['Groups'],
#                           'collections': i['Collections']}
#         print(i)
#     return dct
#
#
# print(get_user_collections())

#
# async def create_user(self, usr_data):  # create new user
#     data_set = {'name': usr_data['name'],
#                 'email': usr_data['email'],
#                 'masterPasswordHash': usr_data['masterPasswordHash'],
#                 'kdf': usr_data['kdf'],
#                 'kdfIterations': usr_data['kdfIterations'],
#                 'captchaResponse': usr_data['captchaResponse'],
#                 'referenceData': usr_data['referenceData'],
#                 'key': usr_data['key']}
#     async with aiohttp.ClientSession() as session:
#         async with session.post(f'http://{IP}/identity/accounts/register', json=data_set) as response:
#             await response.json()
#     return True


import aiohttp

# async def create_organization(org_data):  # create new organization
#     data_set = {'name': org_data['name'],
#                 'email': org_data['email']}
#     async with aiohttp.ClientSession() as session:
#         async with session.post(f'http://127.0.0.1/identity/create-organization', json=data_set) as response:
#             await response.json()
#     return True
#
#
#
#
# create_organization({'name': 'ORGANIZATIONOHT', 'email': 'ASD@calc.ru'})

# _____________________________________________________________________________________________________________________

# Code, which not include in finally project

# async def get_org_id(self, request):
#     org_id = str(subprocess.check_output(f'bw list organizations --session {self.auth}',
#                                          shell=True)).split(':')
#     org_id = org_id[2].split(',')[0]
#     org_id = org_id.replace('"', '')
#     return org_id

# async def get_members(self, request):  # member collection's info
#     org_id = await self.get_org_id(request)
#     info = subprocess.check_output(f'bw list org-members'
#                                    f' --organizationid {org_id}'
#                                    f' --session {self.auth}', shell=True)
#     dct_info = {}
#     for item in json.loads(info):
#         dct_info[item['name']] = (item['email'], item['id'])
#     return dct_info

# async def delete_member(self, id_member):  # delete member of organization
#     subprocess.check_output(
#         f'bw delete org-member {id_member}  --session {self.auth}',
#         shell=True)

# import requests
# #
# a = requests.post('http://127.0.0.1:9090/make_task',
#                   json={'args': [{"action": "create_organization",
#                                   "name": "ogogogogo", "email": "spa@calculate.ru"}]})

# a = requests.post('http://127.0.0.1:9090/make_task',
#                   json={'args': [{"action": "get_users"}]})
# print(a.text)
# a = requests.post('http://127.0.0.1:9090/make_task',
#                   json={'args': [{"action": "delete_organization"}]})


# _____________________________________________________________________________________________________________________
#
# async def give_access(self, data):
#     data = {f"collections": [{"id": data['col_id'],
#                               "readOnly": data['readOnly'],
#                               "hidePasswords": data['hidePasswords']}],
#             "groups": [],
#             "accessAll": False,
#             "permissions": {"response": data['response']},
#             "type": 2}
#     async with aiohttp.ClientSession() as session:
#         async with session.put(
#                 f'{url}/api/organizations/{data["org_id"]}/users/{data["usr_id"]}', json=data) as response:
#             await response.json()
#     return True


# async def create_user(self, usr_data):  # create new user
#     data_set = {'name': usr_data['name'],
#                 'email': usr_data['email'],
#                 'masterPasswordHash': usr_data['password'],
#                 'kdf': 0,
#                 'kdfIterations': 600000,
#                 'captchaResponse': None,
#                 'referenceData': {'id': None},
#                 'key': '2.5IEShKckst22bCac1VAqXg==|emM+qtpiPkw2pzWnVE6TZywPfcyC0am+NIglnmkzWJzWjcHXDKp4Ol'
#                        '+Dtr8GjU4twxWnmS/kC6J+cR6M+X1sDTkEdrU7ctZhQXMCXiTDOSg=|q'
#                        '/3pttcYlltEU2SAJULfv1SERQWcrLAscyywt7u20Ik='}
#     async with aiohttp.ClientSession() as session:
#         async with session.post(f'{url}/identity/accounts/register', json=data_set) as response:
#             await response.json()
#         resp = await self.get_users()
#         async with session.post(
#                 f'http://{IP}/service_vaultwarden/update_users', json=resp) as response:
#             await response.json()
#     return True
#
# async def create_organization(self, org_data):  # create new organization
#     data_set = {
#         "Key": "4.cib4mvoOOcNNlDXBGts1QzVPzsjyxKnw5MizuolmKHg8Otp7Ga/ACq3ZFMQfhKVTaxArJSonFbqpskt6oc9q+Ks2vd5VXbqQWf7k8yx00trgpKp0z1/TyUv410aK8bcNorE380mh8f/MF90gYZLBV6QgY9chlgiR/oQKhNgVrDbaO6o4uGZw5SvaLyzn+FCf/MAEBs51lHLnuu8CCOH9Eb/Mm2EMd9QaFXEHXEdzCPvI0r7PZuHXRx4TVycEZtsQnCp61VV+DZxbQ5sJcDvEWFDKUEL7k+KIf2SNMeHOcnYZz4mt3RkjME5xYmByBCGUn716rXwcod88P+AvA5jGwg==",
#         "Name": org_data["name"],
#         "billingEmail": org_data["email"],
#         "planType": "0",
#         "CollectionName": "Working",
#     }
#     async with aiohttp.ClientSession() as session:
#         async with session.post(f'{url}/api/organizations', json=data_set,
#                                 headers={"Authorization": self.user_token}) as response:
#             await response.json()
#         resp = await self.get_organization()
#         async with session.post(
#                 f'http://{IP}/service_vaultwarden/update_organizations', json=resp) as response:
#             await response.json()
#     return True
#

# async def delete_user_from_organization(self, data):
#     requests.delete(f'{url}/api/organizations/{data["org_id"]}/users/{data["usr-id"]}',
#                     json={"masterPasswordHash": data['password_hash']},
#                     headers={"Authorization": self.user_token})
#     return True

# async def invite_user(self, data):
#     data = {"emails": data['email'],
#             "collections": [{"id": data['col_id'],
#                              "readOnly": data['readOnly'],
#                              "hidePasswords": data['hidePasswords']}],
#             "accessAll": False,
#             "permissions": {"response": None},
#             "type": 2, "groups": [],
#             "accessSecretsManager": False}
#     async with aiohttp.ClientSession() as session:
#         async with session.put(
#                 f'{url}/api/organizations/{data["org_id"]}/users/invite', json=data) as response:
#             resp = await response.json()
#     return True

# _____________________________________________________________________________________________________________________
#
# a = requests.post('http://127.0.0.1:9090/make_task',
#                   json={'args': [{"action": "give_access",
#                                   'col_id': "bc8a2080-8611-4c52-a634-1c6b91c3441f",
#                                   'readOnly': True,
#                                   'hidePasswords': False,
#                                   'org_id': '29858d63-d7c5-45e9-a39e-94eaf46d835e',
#                                   'usr_id': 'b27f058a-5961-47e1-a416-dbfd27342664',
#                                   }]})
# #

# a = requests.post('http://127.0.0.1:9090/make_task',
#                   json={'args': [{"action": "invite_user",
#                                   'col_id': "bc8a2080-8611-4c52-a634-1c6b91c3441f",
#                                   'emails': ['artur@calculate.ru'],
#                                   'adm_email': 'sp@calculate.ru',
#                                   'readOnly': True,
#                                   'hidePasswords': False,
#                                   'org_id': '29858d63-d7c5-45e9-a39e-94eaf46d835e'}]})


# data = {'args': [{"action": "delete_user_from_organization",
#                   'org_id': "29858d63-d7c5-45e9-a39e-94eaf46d835e",
#                   'usr_id': 'b27f058a-5961-47e1-a416-dbfd27342664'}]}
# a = requests.post('http://127.0.0.1:9090/make_task',
#                   json=data)


# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.chrome.options import Options
#
# options = Options()
# options.add_argument("disable-infobars")
# options.add_argument("--disable-extensions")
# options.add_argument("--disable-gpu")
# options.add_argument("--disable-dev-shm-usage")
# options.add_argument("--no-sandbox")
#
#
# driver = webdriver.Chrome(options=options)
# driver.get('http://127.0.0.1/')
# time.sleep(10)

#
# a = requests.post('http://127.0.0.1:9090/make_task',
#                   json={'args': [{"action": "give_access",
#                                   'col_id': 'bc8a2080-8611-4c52-a634-1c6b91c3441f',
#                                   "readOnly": True,
#                                   "hidePasswords": False,
#                                   'org_id': "29858d63-d7c5-45e9-a39e-94eaf46d835e",
#                                   'usr_id': 'b27f058a-5961-47e1-a416-dbfd27342664'
#                                   }]})
# def get_users():
#     page = requests.get(f'http://127.0.0.1/admin/users/overview',
#                         headers={"Cookie": f"VW_ADMIN=argon2idv19m65540t3p4iXJdoThAWfLzt"})
#     lst_members = []
#     soup = bs(page.text, 'html.parser')
#     table = soup.find('table')
#     result = table.find_all('div', 'overflow-auto vw-org-cell')
#     for j in result:
#         lst_members.append({"email": j['data-vw-user-email'],
#                             "user_id": j['data-vw-user-uuid'],
#                             "org_data": [button.get('data-vw-org-uuid')
#                                          for button in j.find_all('button')]})
#     return lst_members
#
#
# print(get_users())


# _____________________________________________________________________________________________________________________

# requests.post('http://127.0.0.1:9090/make_task',
#               json={'args': [{"action": "create_organization",
#                               'name': 'someorg2',
#                               'email': 'lalala@calculate.ru'
#                               }]})

# requests.post('http://127.0.0.1:9090/make_task',
#               json={'args': [{"action": "create_collection",
#                               'org_id': 'e7003152-21c5-42ac-b229-817234295c86',
#                               'name': 'fucking_coll'
#                               }]})

# a = requests.post('http://127.0.0.1:9090/make_task',
#                   json={'args': [{"action": "add_to_organization",
#                                   'col_id': "e78d302e-f60a-43b1-9b4b-004d08a064be",
#                                   'emails': ['arthur@calculate.ru'],
#                                   'adm_email': 'sp@calculate.ru',
#                                   'readOnly': True,
#                                   'hidePasswords': False,
#                                   'org_id': 'a8e2e961-3f7c-45ce-a3f2-af114c1df156'}]})
#
# a = requests.post('http://127.0.0.1:9090/make_task',
#                   json={'args': [{"action": "give_access",
#                                   'col_id': "9d2502bd-a219-4d47-aaeb-abcdbf4d46ad",
#                                   'readOnly': True,
#                                   'hidePasswords': False,
#                                   'org_id': 'a8e2e961-3f7c-45ce-a3f2-af114c1df156',
#                                   'usr_id': '22c60281-b7be-451b-8b03-feabd26fe55e',
#                                   }]})

# a = requests.post('http://127.0.0.1:9090/make_task',
#                   json={'args': [{"action": "change_user",
#                                   'email': 'lalala@calculate.ru',
#                                   'readOnly': True,
#                                   'hidePasswords': False,
#                                   'org_id': 'a8e2e961-3f7c-45ce-a3f2-af114c1df156',
#                                   'col_id': 'e78d302e-f60a-43b1-9b4b-004d08a064be'}]})

# a = requests.post('http://127.0.0.1:9090/make_task',
#                   json={'args': [{"action": "create_user",
#                                   'email': 'lalalala@calculate.ru',
#                                   'name': ' ohohohoh',
#                                   'password': 'qweqweqweqwe'}]})

# a = requests.post('http://127.0.0.1:9090/make_task',
#                   json={'args': [{"action": "delete_user",
#                                   'user_id': '4be2eb60-457b-4906-99ad-791a31d0fc4c'}]})

# a = requests.post('http://127.0.0.1:9090/make_task',
#                   json={'args': [{"action": "delete_user_from_organization",
#                                   'org_id': 'a8e2e961-3f7c-45ce-a3f2-af114c1df156',
#                                   'user': 'arthur@calculate.ru'}]})

# a = requests.post('http://127.0.0.1:9090/make_task',
#                   json={'args': [{"action": "delete_collection",
#                                   'org_id': 'a8e2e961-3f7c-45ce-a3f2-af114c1df156',
#                                   'col_id': 'e78d302e-f60a-43b1-9b4b-004d08a064be'}]})

# a = requests.get(f'http://127.0.0.1/api/organizations/a8e2e961-3f7c-45ce-a3f2-af114c1df156/users?includeCollections'
#                  f'=true', headers={'Authorization': "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9"
#                                                      ".eyJuYmYiOjE2OTE3Mzk2NTksImV4cCI6MTY5MTc0Njg1OSwiaXNzIjoiaHR0cHM6Ly92dy52bXRsdy5ydXxsb2dpbiIsInN1YiI6ImIxODJiZWNmLTZmYTItNDk0NS05MDIyLWRhOWUxMTU4ZTNhYSIsInByZW1pdW0iOnRydWUsIm5hbWUiOiJzcCIsImVtYWlsIjoic3BAY2FsY3VsYXRlLnJ1IiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm9yZ293bmVyIjpbImE4ZTJlOTYxLTNmN2MtNDVjZS1hM2YyLWFmMTE0YzFkZjE1NiJdLCJvcmdhZG1pbiI6W10sIm9yZ3VzZXIiOltdLCJvcmdtYW5hZ2VyIjpbXSwic3N0YW1wIjoiZDM2M2RiN2ItM2UyMi00MGY5LWE4NWUtYTc4NjZkYzZjNDU5IiwiZGV2aWNlIjoiNDIyMmFiMDAtMzMzZS00NTIyLTg3NDEtMzQwYTYyNjdkMjc0Iiwic2NvcGUiOlsiYXBpIiwib2ZmbGluZV9hY2Nlc3MiXSwiYW1yIjpbIkFwcGxpY2F0aW9uIl19.vXvAmQYhMdRXfHC0sMUBVNnGSP0tA82CXkpP-vW6yQ6Pb6-OQ4QnGufKwu2ccB3VVX8vp9wJtWDpRwf1GX1Tazg4sgFnwH3B4ovGxBYjsDJpzSIgwNw66dFVCQaBwB1nwk4dRiq9bA1cq1VDxf4hj_1de_IO2eE25-0y2JBFVLJs_Qohmi0QgyroG08piCqEVjxfGByb1p8ccvn-5pxVqD3RK90zsjz7peFx7exxivuCnL3t1fRY2-3ZYltax8qt4q2waZXY6h3SZHjLnSvcKhCj-2LCDJlZU87I0QUw9UCTVWtUZwPtvn8E74r3Z4-E1Ri2cqQWu3M1aZ7XnwHFlQ"})
# a = a.json()
# for i in a['Data']:
#     print(i)


# _____________________________________________________________________________________________________________________


